# Generated by Django 4.2 on 2025-07-09 15:23

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('apis', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Competition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unique_code', models.CharField(max_length=20, unique=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('prepared', 'Prepared'), ('active', 'Active'), ('past', 'Past')], max_length=10)),
                ('first_day_price', models.DecimalField(decimal_places=2, max_digits=8)),
                ('published_price', models.DecimalField(decimal_places=2, max_digits=8)),
                ('max_entries', models.PositiveIntegerField()),
                ('entries_left', models.PositiveIntegerField()),
                ('live_draw_date', models.DateTimeField()),
                ('closing_date', models.DateTimeField()),
                ('extension_count', models.PositiveIntegerField(default=0)),
                ('sold_out', models.BooleanField(default=False)),
                ('discount_active', models.BooleanField(default=False)),
                ('live_draw_completed', models.BooleanField(default=False)),
                ('number_of_winners', models.PositiveIntegerField(default=1)),
                ('show_winner_summary', models.BooleanField(default=False)),
                ('promo_price', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('trustpilot_link', models.URLField(blank=True, null=True)),
                ('facebook_like_link', models.URLField(blank=True, null=True)),
                ('facebook_community_link', models.URLField(blank=True, null=True)),
                ('max_extensions_allowed', models.PositiveIntegerField(default=4)),
                ('promo_video_url', models.URLField(blank=True, null=True)),
                ('promo_image', models.ImageField(blank=True, null=True, upload_to='competitions/promos/')),
                ('ticket_letter_limit', models.PositiveSmallIntegerField(default=26)),
                ('ticket_number_limit', models.PositiveSmallIntegerField(default=1000)),
                ('ticket_purchase_limit_per_user', models.PositiveIntegerField(default=7)),
                ('is_coupon_competition', models.BooleanField(default=False)),
                ('is_discounted_now', models.BooleanField(default=False)),
                ('is_published', models.BooleanField(default=False)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_discounted', models.BooleanField(default=False)),
                ('is_archived', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['-live_draw_date'],
            },
        ),
        migrations.CreateModel(
            name='CompetitionGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('is_coupon_competition', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='ECard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=10, unique=True)),
                ('video', models.FileField(upload_to='ecards/')),
                ('is_active', models.BooleanField(default=True)),
                ('is_used', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='InstantWinPrize',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prize_title', models.CharField(max_length=255)),
                ('prize_description', models.TextField()),
                ('stock', models.PositiveIntegerField()),
                ('image', models.ImageField(blank=True, null=True, upload_to='instant_wins/')),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='competition.competition')),
            ],
        ),
        migrations.CreateModel(
            name='Prize',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('value', models.DecimalField(decimal_places=2, max_digits=10)),
                ('category', models.CharField(choices=[('HER', 'HER'), ('HIM', 'HIM'), ('HOME', 'HOME'), ('KIDS', 'KIDS'), ('TECH', 'TECH')], max_length=50)),
                ('media', models.JSONField(default=list)),
            ],
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ticket_number', models.CharField(max_length=10)),
                ('is_active', models.BooleanField(default=True)),
                ('is_winner', models.BooleanField(default=False)),
                ('win_rank', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('attributed_manually', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='competition.competition')),
                ('ecard', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='competition.ecard')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='apis.userprofile')),
            ],
            options={
                'unique_together': {('competition', 'ticket_number')},
            },
        ),
        migrations.CreateModel(
            name='Winner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('winner_picture', models.ImageField(blank=True, null=True, upload_to='winners/')),
                ('winner_video', models.FileField(blank=True, null=True, upload_to='winners/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('prize', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='competition.prize')),
                ('ticket', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='competition.ticket')),
            ],
        ),
        migrations.CreateModel(
            name='TicketRange',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('range_type', models.CharField(choices=[('A-A', 'A-A'), ('A-Z', 'A-Z'), ('100', '100'), ('200', '200'), ('300', '300'), ('400', '400'), ('500', '500'), ('600', '600'), ('700', '700'), ('800', '800'), ('900', '900'), ('1000', '1000')], max_length=10)),
                ('competition', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='competition.competition')),
            ],
        ),
        migrations.CreateModel(
            name='TicketInstantWin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('won_at', models.DateTimeField(auto_now_add=True)),
                ('instant_win_prize', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='competition.instantwinprize')),
                ('ticket', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='competition.ticket')),
            ],
        ),
        migrations.CreateModel(
            name='DiscountCoupon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=50, unique=True)),
                ('percentage', models.DecimalField(decimal_places=2, max_digits=5)),
                ('is_affiliate_rc', models.BooleanField(default=False)),
                ('active', models.BooleanField(default=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('competition_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='competition.competitiongroup')),
            ],
        ),
        migrations.CreateModel(
            name='CompetitionPrize',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prize_position', models.PositiveSmallIntegerField()),
                ('ticket_number', models.CharField(max_length=10)),
                ('prize_value', models.DecimalField(decimal_places=2, max_digits=10)),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prizes', to='competition.competition')),
            ],
        ),
        migrations.AddField(
            model_name='competition',
            name='group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='competition.competitiongroup'),
        ),
        migrations.AddField(
            model_name='competition',
            name='prize',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='competition.prize'),
        ),
        migrations.CreateModel(
            name='TicketLock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('letter', models.CharField(max_length=1)),
                ('number', models.PositiveIntegerField()),
                ('locked_at', models.DateTimeField(auto_now_add=True)),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='competition.competition')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='apis.userprofile')),
            ],
            options={
                'unique_together': {('competition', 'letter', 'number')},
            },
        ),
    ]
